6
1 2 3 4 5 6
2 1 1 1

3
3 4 5
1 0 1 0

2
5 6
0 0 1 0


7
1 2 1 2 1 3 2

9
10 20 20 10 10 30 50 10 20


10 3
1 5 3
4 8 7
6 9 1


STDIN
-----
2
5
1 1 1 2 2
5
2 1 3 1 2

         private static int countingInversions(int[] a) {

                  int n = a.length;

                  int[] buf = new int[n];

                  int cnt = count(a,0,n-1,buf);



                  return cnt;

         }



         private static int count(int[] a, int s, int e, int[] buf){

                  if((e-s)<1) {

                           return 0;

                  }



                  int m = (s+e) / 2;

                  int leftCount = count(a,s,m,buf);

                  int rightCount = count(a,m+1,e,buf);

                  int mergeCount = merge(a,s,m,e,buf);

                  System.arraycopy(buf, s, a, s, (e-s)+1);



                  return leftCount + rightCount + mergeCount;

         }



         private static int merge(int[]a,int s, int m, int e, int[] buf){

                  //System.out.println("merge("+s+" "+e+")");

                  int left=s;

                  int right=m+1;

                  int count=0;

                  for(int k=s;k<=e;k++){

                           if(left<=m && ( (right>e) || (a[left] <= a[right]) ) ){

                                   buf[k] = a[left++];

                           }else{

                                   buf[k] = a[right++];

                                   count = count + (m-left+1);

                           }

                  }

                  return count;

         }
6 3
5 1
2 1
1 1
8 1
10 0
5 0